{"version":3,"sources":["custom.js","test.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","getter","SkinnedMesh","_THREE$Mesh","geometry","materials","this","_this","idMatrix","defaultMatrix","bones","boneMatrices","camera","set","matrixType","THREE","Matrix4","Mesh"],"mappings":"AAAA,YAMA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,EAAMC,GAAQ,IAAKD,EAAQ,KAAM,IAAIE,gBAAe,4DAAgE,QAAOD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BD,EAAPC,EAElO,QAASE,WAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIP,WAAU,iEAAoEO,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GARje,GAAIW,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWX,WAAaW,EAAWX,aAAc,EAAOW,EAAWT,cAAe,EAAU,SAAWS,KAAYA,EAAWV,UAAW,GAAML,OAAOgB,eAAeL,EAAQI,EAAWE,IAAKF,IAAiB,MAAO,UAAUzB,EAAa4B,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBpB,EAAYS,UAAWmB,GAAiBC,GAAaT,EAAiBpB,EAAa6B,GAAqB7B,MAE5hB8B,KAAO,QAASC,GAAIC,EAAQC,EAAUC,GAA2B,OAAXF,IAAiBA,EAASG,SAAS1B,UAAW,IAAI2B,GAAO1B,OAAO2B,yBAAyBL,EAAQC,EAAW,IAAaK,SAATF,EAAoB,CAAE,GAAIG,GAAS7B,OAAO8B,eAAeR,EAAS,OAAe,QAAXO,EAAmB,OAAkCR,EAAIQ,EAAQN,EAAUC,GAAoB,GAAI,SAAWE,GAAQ,MAAOA,GAAKvB,KAAgB,IAAI4B,GAASL,EAAKL,GAAK,IAAeO,SAAXG,EAA4C,MAAOA,GAAOrC,KAAK8B,ICiBtdQ,YDYY,SAAUC,GCXxB,QAAAD,GAAYE,EAAUC,GAAW/C,gBAAAgD,KAAAJ,EAAA,IAAAK,GAAA7C,2BAAA4C,MAAAJ,EAAAxB,WAAAR,OAAA8B,eAAAE,IAAAtC,KAAA0C,KACzBF,EAAUC,GADe,OAG/BE,GAAKC,SAAWN,EAAYO,gBAC5BF,EAAKG,SACLH,EAAKI,gBAL0BJ,EDiDnC,MArCAzC,WAAUoC,EAAaC,GAcvBxB,aAAauB,IACXf,IAAK,SACLd,MAAO,SCpBAuC,GAELtB,KAAAY,EAAAjC,UAAAS,WAAAR,OAAA8B,eAAAE,EAAAjC,WAAA,SAAAqC,MAAA1C,KAAA0C,SDuBFnB,IAAK,YACLI,IAAK,WCrBH,MAAOe,MAAKI,MAAM1B,UDyBpBG,IAAK,aACL0B,IAAK,SCxBUC,GACbR,KAAKE,SAAWN,EAAYY,UD2B9B3B,IAAK,gBACLd,MAAO,WCzBL,MAAO,IAAI0C,OAAMC,YD8Bdd,GClDiBa,MAAME","file":"custom.js","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// // Expression bodies\n// var odds = evens.map(v => v + 1);\n// var nums = evens.map((v, i) => v + i);\n// var pairs = evens.map(v => ({even: v, odd: v + 1}));\n\n// // Statement bodies\n// nums.forEach(v => {\n//   if (v % 5 === 0)\n//     fives.push(v);\n// });\n\n// // Lexical this\n// var bob = {\n//   _name: \"Bob\",\n//   _friends: [],\n//   printFriends() {\n//     this._friends.forEach(f =>\n//       console.log(this._name + \" knows \" + f));\n//   }\n// }\n\nvar SkinnedMesh = function (_THREE$Mesh) {\n  _inherits(SkinnedMesh, _THREE$Mesh);\n\n  function SkinnedMesh(geometry, materials) {\n    _classCallCheck(this, SkinnedMesh);\n\n    var _this = _possibleConstructorReturn(this, (SkinnedMesh.__proto__ || Object.getPrototypeOf(SkinnedMesh)).call(this, geometry, materials));\n\n    _this.idMatrix = SkinnedMesh.defaultMatrix();\n    _this.bones = [];\n    _this.boneMatrices = [];\n    //...\n    return _this;\n  }\n\n  _createClass(SkinnedMesh, [{\n    key: \"update\",\n    value: function update(camera) {\n      //...\n      _get(SkinnedMesh.prototype.__proto__ || Object.getPrototypeOf(SkinnedMesh.prototype), \"update\", this).call(this);\n    }\n  }, {\n    key: \"boneCount\",\n    get: function get() {\n      return this.bones.length;\n    }\n  }, {\n    key: \"matrixType\",\n    set: function set(matrixType) {\n      this.idMatrix = SkinnedMesh[matrixType]();\n    }\n  }], [{\n    key: \"defaultMatrix\",\n    value: function defaultMatrix() {\n      return new THREE.Matrix4();\n    }\n  }]);\n\n  return SkinnedMesh;\n}(THREE.Mesh);\n\n//   var obj = {\n//     // __proto__\n//     __proto__: theProtoObj,\n//     // Shorthand for ‘handler: handler’\n//     handler,\n//     // Methods\n//     toString() {\n//      // Super calls\n//      return \"d \" + super.toString();\n//     },\n//     // Computed (dynamic) property names\n//     [ 'prop_' + (() => 42)() ]: 42\n// };\n\n// // Basic literal string creation\n// `In JavaScript '\\n' is a line-feed.`\n\n// // Multiline strings\n// `In JavaScript this is\n//  not legal.`\n\n// // String interpolation\n// var name = \"Bob\", time = \"today\";\n// `Hello ${name}, how are you ${time}?`\n\n// // Construct an HTTP request prefix is used to interpret the replacements and construction\n// POST`http://foo.org/bar?a=${a}&b=${b}\n//      Content-Type: application/json\n//      X-Credentials: ${credentials}\n//      { \"foo\": ${foo},\n//        \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n\n// // list matching\n// var [a, , b] = [1,2,3];\n\n// // object matching\n// var { op: a, lhs: { op: b }, rhs: c }\n//        = getASTNode()\n\n// // object matching shorthand\n// // binds `op`, `lhs` and `rhs` in scope\n// var {op, lhs, rhs} = getASTNode()\n\n// // Can be used in parameter position\n// function g({name: x}) {\n//   console.log(x);\n// }\n// g({name: 5})\n\n// // Fail-soft destructuring\n// var [a] = [];\n// a === undefined;\n\n// // Fail-soft destructuring with defaults\n// var [a = 1] = [];\n// a === 1;\n\n\n// function f(x, y=12) {\n//     // y is 12 if not passed (or passed as undefined)\n//     return x + y;\n//   }\n//   f(3) == 15\n\n//   function f(x, ...y) {\n//     // y is an Array\n//     return x * y.length;\n//   }\n//   f(3, \"hello\", true) == 6\n\n//   function f(x, y, z) {\n//     return x + y + z;\n//   }\n//   // Pass each elem of array as argument\n//   f(...[1,2,3]) == 6\n\n//   function f() {\n//     {\n//       let x;\n//       {\n//         // okay, block scoped name\n//         const x = \"sneaky\";\n//         // error, const\n//         x = \"foo\";\n//       }\n//       // error, already declared in block\n//       let x = \"inner\";\n//     }\n//   }\n\n//   let fibonacci = {\n//     [Symbol.iterator]() {\n//       let pre = 0, cur = 1;\n//       return {\n//         next() {\n//           [pre, cur] = [cur, pre + cur];\n//           return { done: false, value: cur }\n//         }\n//       }\n//     }\n//   }\n\n//   for (var n of fibonacci) {\n//     // truncate the sequence at 1000\n//     if (n > 1000)\n//       break;\n//     console.log(n);\n//   }\n\n//   var fibonacci = {\n//     [Symbol.iterator]: function*() {\n//       var pre = 0, cur = 1;\n//       for (;;) {\n//         var temp = pre;\n//         pre = cur;\n//         cur += temp;\n//         yield cur;\n//       }\n//     }\n//   }\n\n//   for (var n of fibonacci) {\n//     // truncate the sequence at 1000\n//     if (n > 1000)\n//       break;\n//     console.log(n);\n//   }","// // Expression bodies\n// var odds = evens.map(v => v + 1);\n// var nums = evens.map((v, i) => v + i);\n// var pairs = evens.map(v => ({even: v, odd: v + 1}));\n\n// // Statement bodies\n// nums.forEach(v => {\n//   if (v % 5 === 0)\n//     fives.push(v);\n// });\n\n// // Lexical this\n// var bob = {\n//   _name: \"Bob\",\n//   _friends: [],\n//   printFriends() {\n//     this._friends.forEach(f =>\n//       console.log(this._name + \" knows \" + f));\n//   }\n// }\n\nclass SkinnedMesh extends THREE.Mesh {\n    constructor(geometry, materials) {\n      super(geometry, materials);\n  \n      this.idMatrix = SkinnedMesh.defaultMatrix();\n      this.bones = [];\n      this.boneMatrices = [];\n      //...\n    }\n    update(camera) {\n      //...\n      super.update();\n    }\n    get boneCount() {\n      return this.bones.length;\n    }\n    set matrixType(matrixType) {\n      this.idMatrix = SkinnedMesh[matrixType]();\n    }\n    static defaultMatrix() {\n      return new THREE.Matrix4();\n    }\n  }\n\n//   var obj = {\n//     // __proto__\n//     __proto__: theProtoObj,\n//     // Shorthand for ‘handler: handler’\n//     handler,\n//     // Methods\n//     toString() {\n//      // Super calls\n//      return \"d \" + super.toString();\n//     },\n//     // Computed (dynamic) property names\n//     [ 'prop_' + (() => 42)() ]: 42\n// };\n\n// // Basic literal string creation\n// `In JavaScript '\\n' is a line-feed.`\n\n// // Multiline strings\n// `In JavaScript this is\n//  not legal.`\n\n// // String interpolation\n// var name = \"Bob\", time = \"today\";\n// `Hello ${name}, how are you ${time}?`\n\n// // Construct an HTTP request prefix is used to interpret the replacements and construction\n// POST`http://foo.org/bar?a=${a}&b=${b}\n//      Content-Type: application/json\n//      X-Credentials: ${credentials}\n//      { \"foo\": ${foo},\n//        \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n\n// // list matching\n// var [a, , b] = [1,2,3];\n\n// // object matching\n// var { op: a, lhs: { op: b }, rhs: c }\n//        = getASTNode()\n\n// // object matching shorthand\n// // binds `op`, `lhs` and `rhs` in scope\n// var {op, lhs, rhs} = getASTNode()\n\n// // Can be used in parameter position\n// function g({name: x}) {\n//   console.log(x);\n// }\n// g({name: 5})\n\n// // Fail-soft destructuring\n// var [a] = [];\n// a === undefined;\n\n// // Fail-soft destructuring with defaults\n// var [a = 1] = [];\n// a === 1;\n\n\n// function f(x, y=12) {\n//     // y is 12 if not passed (or passed as undefined)\n//     return x + y;\n//   }\n//   f(3) == 15\n  \n//   function f(x, ...y) {\n//     // y is an Array\n//     return x * y.length;\n//   }\n//   f(3, \"hello\", true) == 6\n  \n//   function f(x, y, z) {\n//     return x + y + z;\n//   }\n//   // Pass each elem of array as argument\n//   f(...[1,2,3]) == 6\n\n//   function f() {\n//     {\n//       let x;\n//       {\n//         // okay, block scoped name\n//         const x = \"sneaky\";\n//         // error, const\n//         x = \"foo\";\n//       }\n//       // error, already declared in block\n//       let x = \"inner\";\n//     }\n//   }\n\n//   let fibonacci = {\n//     [Symbol.iterator]() {\n//       let pre = 0, cur = 1;\n//       return {\n//         next() {\n//           [pre, cur] = [cur, pre + cur];\n//           return { done: false, value: cur }\n//         }\n//       }\n//     }\n//   }\n  \n//   for (var n of fibonacci) {\n//     // truncate the sequence at 1000\n//     if (n > 1000)\n//       break;\n//     console.log(n);\n//   }\n\n//   var fibonacci = {\n//     [Symbol.iterator]: function*() {\n//       var pre = 0, cur = 1;\n//       for (;;) {\n//         var temp = pre;\n//         pre = cur;\n//         cur += temp;\n//         yield cur;\n//       }\n//     }\n//   }\n  \n//   for (var n of fibonacci) {\n//     // truncate the sequence at 1000\n//     if (n > 1000)\n//       break;\n//     console.log(n);\n//   }\n\n"]}